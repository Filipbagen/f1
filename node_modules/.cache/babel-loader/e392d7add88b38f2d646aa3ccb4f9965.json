{"ast":null,"code":"import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLRenderTarget, RGBAFormat } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\nextend({\n  EffectComposer,\n  RenderPass,\n  ShaderPass\n});\n\nconst isWebGL2Available = () => {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\n\nconst Effects = /*#__PURE__*/React.forwardRef((_ref, ref) => {\n  let {\n    children,\n    multisamping = 8,\n    renderIndex = 1,\n    disableGamma = false,\n    disableRenderPass = false,\n    ...props\n  } = _ref;\n  const composer = React.useRef();\n  const {\n    scene,\n    camera,\n    gl,\n    size,\n    viewport\n  } = useThree();\n  const [target] = React.useState(() => {\n    const t = new WebGLRenderTarget(size.width, size.height, {\n      format: RGBAFormat,\n      encoding: gl.outputEncoding\n    });\n    t.samples = multisamping;\n    return t;\n  });\n  React.useEffect(() => {\n    var _composer$current, _composer$current2;\n\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(viewport.dpr);\n  }, [gl, size, viewport.dpr]);\n  useFrame(() => {\n    var _composer$current3;\n\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  const passes = [];\n  if (!disableRenderPass) passes.push( /*#__PURE__*/React.createElement(\"renderPass\", {\n    key: \"renderpass\",\n    args: [scene, camera]\n  }));\n  if (!disableGamma) passes.push( /*#__PURE__*/React.createElement(\"shaderPass\", {\n    key: \"gammapass\",\n    args: [GammaCorrectionShader]\n  }));\n  React.Children.forEach(children, (el, index) => passes.push( /*#__PURE__*/React.cloneElement(el, {\n    key: index,\n    attach: `passes-${index}`\n  })));\n  return /*#__PURE__*/React.createElement(\"effectComposer\", _extends({\n    ref: mergeRefs([ref, composer]),\n    args: [gl, target]\n  }, props), passes);\n});\nexport { Effects, isWebGL2Available };","map":{"version":3,"sources":["/Users/filip/code/formula1/node_modules/@react-three/drei/core/Effects.js"],"names":["_extends","React","WebGLRenderTarget","RGBAFormat","extend","useThree","useFrame","EffectComposer","RenderPass","ShaderPass","GammaCorrectionShader","mergeRefs","isWebGL2Available","canvas","document","createElement","window","WebGL2RenderingContext","getContext","e","Effects","forwardRef","ref","children","multisamping","renderIndex","disableGamma","disableRenderPass","props","composer","useRef","scene","camera","gl","size","viewport","target","useState","t","width","height","format","encoding","outputEncoding","samples","useEffect","_composer$current","_composer$current2","current","setSize","setPixelRatio","dpr","_composer$current3","render","passes","push","key","args","Children","forEach","el","index","cloneElement","attach"],"mappings":"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","sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { WebGLRenderTarget, RGBAFormat } from 'three';\nimport { extend, useThree, useFrame } from '@react-three/fiber';\nimport { EffectComposer, RenderPass, ShaderPass, GammaCorrectionShader } from 'three-stdlib';\nimport mergeRefs from 'react-merge-refs';\n\nextend({\n  EffectComposer,\n  RenderPass,\n  ShaderPass\n});\nconst isWebGL2Available = () => {\n  try {\n    var canvas = document.createElement('canvas');\n    return !!(window.WebGL2RenderingContext && canvas.getContext('webgl2'));\n  } catch (e) {\n    return false;\n  }\n};\nconst Effects = /*#__PURE__*/React.forwardRef(({\n  children,\n  multisamping = 8,\n  renderIndex = 1,\n  disableGamma = false,\n  disableRenderPass = false,\n  ...props\n}, ref) => {\n  const composer = React.useRef();\n  const {\n    scene,\n    camera,\n    gl,\n    size,\n    viewport\n  } = useThree();\n  const [target] = React.useState(() => {\n    const t = new WebGLRenderTarget(size.width, size.height, {\n      format: RGBAFormat,\n      encoding: gl.outputEncoding\n    });\n    t.samples = multisamping;\n    return t;\n  });\n  React.useEffect(() => {\n    var _composer$current, _composer$current2;\n\n    (_composer$current = composer.current) == null ? void 0 : _composer$current.setSize(size.width, size.height);\n    (_composer$current2 = composer.current) == null ? void 0 : _composer$current2.setPixelRatio(viewport.dpr);\n  }, [gl, size, viewport.dpr]);\n  useFrame(() => {\n    var _composer$current3;\n\n    return (_composer$current3 = composer.current) == null ? void 0 : _composer$current3.render();\n  }, renderIndex);\n  const passes = [];\n  if (!disableRenderPass) passes.push( /*#__PURE__*/React.createElement(\"renderPass\", {\n    key: \"renderpass\",\n    args: [scene, camera]\n  }));\n  if (!disableGamma) passes.push( /*#__PURE__*/React.createElement(\"shaderPass\", {\n    key: \"gammapass\",\n    args: [GammaCorrectionShader]\n  }));\n  React.Children.forEach(children, (el, index) => passes.push( /*#__PURE__*/React.cloneElement(el, {\n    key: index,\n    attach: `passes-${index}`\n  })));\n  return /*#__PURE__*/React.createElement(\"effectComposer\", _extends({\n    ref: mergeRefs([ref, composer]),\n    args: [gl, target]\n  }, props), passes);\n});\n\nexport { Effects, isWebGL2Available };\n"]},"metadata":{},"sourceType":"module"}